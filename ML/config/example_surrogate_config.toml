# Surrogate Model TOML configuration

[data]
sample_fraction = 0.1                 
max_samples = 100000000

[model]
model_type = "neural_network"   # or "gaussian_process"
hidden_dims = [256, 128, 64, 32]
dropout_rate = 0.2

[training]
epochs = 3000000
batch_size = 256
learning_rate = 1e-3
validation_split = 0.2

[pca]
use_pca = false
pca_variance_threshold = 0.95

[cuda]
use_cuda = true
cuda_batch_size = 16384

[constraints]
apply = true
# mode = "range" uses [keq_min, keq_max]; mode = "fixed" enforces keq1/keq2 with tolerance
mode = "range"
keq_min = 0.01
keq_max = 100.0
# For fixed mode (example):
# keq1 = 1.5
# keq2 = 0.8
# tolerance = 1e-3

[outputs]
target_variables = ["A_final", "B_final", "C_final", "v1_mean", "v2_mean"]
uncertainty_estimation = true

[space.rates]
k1f = { start = 0.1, step = 0.02, stop = 20.0 }
k1r = { start = 0.1, step = 0.02, stop = 20.0 }
k2f = { start = 0.1, step = 0.02, stop = 20.0 }
k2r = { start = 0.1, step = 0.02, stop = 20.0 }
k3f = { start = 0.1, step = 0.02, stop = 20.0 }
k3r = { start = 0.1, step = 0.02, stop = 20.0 }
k4f = { start = 0.1, step = 0.02, stop = 20.0 }
k4r = { start = 0.1, step = 0.02, stop = 20.0 }

[space.init]
A  = { start = 0.1, step = 0.02, stop = 20.0 }
B  = { start = 0.0, step = 0.02, stop = 5.0 }
C  = { start = 0.0, step = 0.02, stop = 5.0 }
E1 = { start = 1.0, step = 0.02, stop = 20.0 }
E2 = { start = 1.0, step = 0.02, stop = 20.0 }

[space.tspan]
t0 = 0.0
t1 = 5.0


